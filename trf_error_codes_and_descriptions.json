{
    "1": "The NEEDCHECK error means that the job requires manual intervention. This typically indicates that something went wrong during the job's execution, and it cannot proceed without someone checking and resolving the issue. It is a signal to the user or operator that they need to look into the job's details, logs, or configuration to understand and fix the problem before the job can continue or be rerun.",
    "3": "The TRF_SETUP exit code is used to indicate a \"Transform setup error\". This means that there was an issue during the initial setup phase of the transformation process. This could involve problems with configuration files, environment settings, or other prerequisites that need to be in place before the transformation can proceed.",
    "4": "The TRF_ARG_CONV_FAIL error represents a failure to convert transform arguments to the correct type. This error occurs when the transformation process encounters an issue while trying to convert the provided arguments into the expected data types.",
    "5": "The TRF_ARG_OUT_OF_RANGE error is an exit code used to indicate that an argument provided to a transform is outside the allowed range of values. This error helps identify when an input value is not within the expected limits, which can prevent the transform from executing correctly.",
    "7": "The TRF_ARG_ERROR error indicates that there is an issue with one of the arguments provided to the transform. This could be due to various reasons such as:  The argument is not recognized by the transform. The argument is in an incorrect format. The argument is missing required components. The argument does not meet the expected criteria or constraints.",
    "8": "The TRF_ARG_DATASET exit code represents an error that occurs when there is an inconsistent dataset value in the input file list. This means that the dataset values provided in the input files do not match the expected or required format, causing the transform process to fail.",
    "9": "The TRF_INPUT_FILE_ERROR error is an exit code used to indicate that there is a problem with one of the input files that the transformation process is trying to use. This could be due to various reasons such as the file being missing, corrupted, or not in the expected format. When this error is encountered, it means that the transformation process cannot proceed correctly due to issues with the input file.",
    "11": "The TRF_OUTPUT_FILE_ERROR error indicates that there was a problem when handling a transform output file. This could mean that the program encountered an issue while trying to create, write to, or manage an output file during its execution.",
    "12": "The TRF_GRAPH_ERROR error code indicates a problem in setting up the substep graph. This error occurs when there is an issue with configuring the sequence of steps (substeps) that the transformation process needs to follow. The substep graph is essentially a representation of the workflow or the sequence of operations that need to be executed. If there is a problem in defining or connecting these steps correctly, the TRF_GRAPH_ERROR is raised.",
    "13": "The TRF_EXECUTION_PATH_ERROR error indicates that there is a problem trying to generate the requested outputs from the given inputs because the graph does not provide a path to do this. In simpler terms, it means that the system cannot figure out how to process the input data to produce the desired output, likely due to a configuration or setup issue in the processing steps.",
    "14": "The TRF_KEY_ERROR error represents a key error in a transform's internal dictionary. This error occurs when the code tries to access a key in a dictionary that does not exist. In Python, dictionaries are collections of key-value pairs, and attempting to access a non-existent key will raise a KeyError.",
    "15": "The TRF_NOEVENTS error code indicates that there are no events to be processed in the input file. This typically happens when the skipEvents parameter is set to a value higher than the actual number of events available in the input file. In other words, the job is instructed to skip more events than are present, resulting in no events left to process.",
    "16": "The TRF_ARG_CHOICES_FAIL error occurs when an invalid selection is made in an argument that is restricted to a specific set of choices. This means that the provided argument value is not one of the allowed options.",
    "17": "The TRF_ARG_MISSING error indicates that a mandatory argument required by the transform is missing. This means that the transform expected a certain input argument to be provided, but it was not included when the transform was executed. This error helps identify issues where necessary inputs are not supplied, ensuring that the transform has all the information it needs to run correctly.",
    "18": "The TRF_REDUCTION_CONFIG_ERROR error indicates that there is an invalid configuration in a reduction job. This means that the settings or parameters provided for the reduction job are incorrect or not properly set up, which prevents the job from running successfully. A reduction job typically refers to a process in data analysis where large datasets are reduced to smaller, more manageable sizes by aggregating, filtering, or summarizing the data. This is often done to extract meaningful insights or to prepare the data for further analysis. In the context of the ATLAS software, a reduction job might involve processing and reducing the data collected from experiments to a more concise form for easier analysis and interpretation.",
    "19": "The TRF_GRAPH_STEERING_ERROR error code indicates a problem when trying to apply steering to the substep graph. In simpler terms, it means there was an issue with directing or controlling the sequence of operations (substeps) that the transform needs to perform. This error typically occurs when the system cannot properly set up or manage the workflow of tasks that need to be executed.",
    "35": "The TRF_INTERNAL_REPORT_ERROR error means that something went wrong inside the program when it was trying to create reports about the transformation process. This could be due to various reasons such as bugs in the code, issues with the data being processed, or problems with the environment in which the code is running.",
    "36": "The TRF_METADATA_CALL_FAIL error occurs when the program tries to execute an external command or script to retrieve or process metadata, but the command or script does not complete successfully. This could be due to various reasons such as the external program not being available, incorrect parameters being passed, or other runtime issues.",
    "37": "The TRF_RUNTIME_ERROR is an error that represents a general runtime error that occurs during the execution of a transform. This error is used when a specific cause for the failure is not identified, but it is clear that something went wrong during the runtime of the transform.",
    "38": "The TRF_EXEC_VALIDATION_EVENTCOUNT error indicates that there was a failure in validating the event count during the execution of a transform. This means that the number of events processed did not match the expected count, which could be due to various reasons such as data corruption, incorrect input files, or issues in the processing logic. This error helps in identifying problems related to the event count in the transformation process.",
    "39": "The TRF_DBRELEASE_PROBLEM error indicates that there was a failure in setting up the DBRelease properly. DBRelease is a package used in the ATLAS software framework to manage database releases. This error suggests that the necessary database setup did not complete successfully, which could prevent the transform from running correctly.",
    "52": "The `TRF_FILEMERGE_PROBLEM` error occurs when the system encounters an issue while trying to combine multiple output files into a single file during the execution of a transformation job. This could be due to various reasons such as file access issues, file format incompatibilities, or other unexpected problems during the merge process.",
    "64": "The `TRF_EXEC` error code represents a \"General failure in transform substep executor.\" This means that during the execution of a specific substep in the transformation process, an error occurred that caused the substep to fail. This error is general and does not specify the exact nature of the failure, only that something went wrong during the execution of that substep.",
    "65": "The TRF_EXEC_FAIL error indicates that a transform substep executor has returned a non-zero exit code. This typically means that the substep executor encountered an error during its execution.",
    "66": "The TRF_EXEC_VALIDATION_FAIL exit code represents a validation failure in the transform substep executor. This means that during the execution of a specific substep in the transformation process, a validation check did not pass, indicating that something went wrong or did not meet the expected criteria.",
    "67": "The TRF_EXEC_TIMEOUT error indicates that the transform substep executor has timed out. This means that a specific substep within the transformation process took longer to complete than the allowed time limit, causing the process to be terminated. This error is represented by the exit code `67` and is described as `Transform substep executor timed out`.",
    "68": "The TRF_EXEC_LOGERROR error code indicates that errors were found in the substep executor logfile. This means that during the execution of a substep in the transformation process, some issues were logged, which caused the transformation to fail or encounter problems. The error code `68` is associated with this specific issue, and the description provided is \"Errors found in substep executor logfile\".",
    "69": "The TRF_EXEC_SETUP_FAIL error indicates that there was a failure during the setup of the transform substep executor. This means that the process responsible for preparing the environment or configuration needed to execute a specific substep of the transformation encountered an issue and could not complete successfully. This error is represented by the exit code `69` and is described as \"Transform substep executor setup failed\".",
    "70": "The TRF_EXEC_SETUP_WRAPPER error indicates a problem with the wrapper script used to set up the transform substep executor. This error suggests that there was an issue in the script that prepares the environment or configuration for executing a specific part of the transformation process. This could be due to a missing file, incorrect configuration, or other setup-related problems.",
    "71": "The TRF_LOGFILE_FAIL error code indicates a problem with the substep executor logfile. This error is used to signify that there was an issue encountered while handling or processing the logfile generated by a substep executor during the transformation process. This could involve problems such as the logfile not being created, being inaccessible, or containing errors that prevent further processing.",
    "72": "The TRF_AMI_ERROR error code indicates a problem with getting AMI (ATLAS Metadata Interface) tag information. This error occurs when the transform process encounters an issue while trying to retrieve or process metadata tags from the AMI system, which is used to manage and access metadata for the ATLAS experiment.",
    "73": "This error indicates that there was an issue with the run arguments file used by the transform substep executor. The run arguments file is likely a configuration or input file that specifies the arguments for the execution of a substep in the transformation process. If this file is missing, malformed, or contains invalid data, the TRF_EXEC_RUNARGS_ERROR error will be raised.",
    "74": "The TRF_INPUT_FILE_VALIDATION_FAIL error indicates that the validation of an input file has failed. This means that the input file provided to the transform did not meet the expected criteria or format required for processing. This could be due to various reasons such as missing data, incorrect file format, or corrupted content.",
    "75": "The TRF_OUTPUT_FILE_VALIDATION_FAIL error indicates that the output file produced by a transformation process did not pass the validation checks. This means that the file might be corrupted, incomplete, or not in the expected format. This error helps ensure that the output files are reliable and meet the required standards before being used in further processing or analysis.",
    "129": "TRF_SIG_SIGHUP: This signal is typically sent to a process when its controlling terminal is closed or the connection is lost. In many applications, it is interpreted as a request to reload configuration or gracefully terminate.",
    "130": "SIGINT: Often generated when the user presses Ctrl+C, this signal interrupts a process. When handled, it allows the program to clean up and exit gracefully rather than abruptly terminating.",
    "131": "SIGQUIT: Similar to SIGINT, SIGQUIT instructs a process to quit. However, it usually also causes the process to produce a core dump, which can be useful for debugging the state of the application at the time of termination.",
    "132": "SIGILL: This signal indicates that the process has attempted to execute an illegal, malformed, or undefined instruction. Such errors are often a sign of a serious programming bug or corruption in the executable.",
    "133": "SIGTRAP: Used primarily by debuggers, this signal is sent when a breakpoint is hit or when a process performs a trap instruction. It allows a debugger to take control of the process.",
    "134": "SIGABRT: Typically invoked by the process itself when it detects an unrecoverable error, this signal aborts the process. It is commonly used in conjunction with the C library function abort() and usually produces a core dump.",
    "135": "SIGEMT: Historically, this signal was used to indicate an emulation trap (such as executing an instruction that requires emulation). It is rarely used on modern systems.",
    "136": "SIGFPE: Standing for \"Floating Point Exception,\" this signal is raised when a process performs an erroneous arithmetic operation such as division by zero or operations resulting in overflow in floating-point calculations.",
    "137": "SIGKILL: This signal forces a process to terminate immediately. It cannot be caught, blocked, or ignored by the process, making it a guaranteed way to kill a process that may be unresponsive.",
    "138": "SIGBUS: A bus error occurs when a process tries to access memory in a way that the underlying hardware cannot physically address (for example, due to misaligned memory access). It often indicates a low-level memory access problem.",
    "139": "SIGSEGV: Commonly known as a segmentation fault, this signal is generated when a process attempts to access a memory location that it is not permitted to access. This is often due to dereferencing a null or invalid pointer.",
    "140": "SIGSYS: This signal indicates that the process made an invalid system call. It is a way for the operating system to notify the process that it attempted to perform an action that is not allowed.",
    "141": "SIGPIPE: Occurs when a process writes to a pipe or socket that has been closed on the reading end. Instead of hanging indefinitely, the operating system sends SIGPIPE to alert the process that the connection is broken.",
    "142": "SIGALRM:  Generated when a timer set by the alarm() function expires, this signal notifies the process that a preset amount of time has passed, often used to implement timeouts.",
    "143": "SIGTERM: A polite request for a process to terminate, SIGTERM can be caught and handled to allow for cleanup and graceful shutdown. It is the standard signal for asking a process to stop.",
    "144": "SIGURG: This signal indicates that urgent data is available on a socket. It is commonly used in network programming to handle out-of-band data.",
    "145": "SIGSTOP:  Unlike other signals, SIGSTOP cannot be caught or ignored. It forces the process to stop execution (pause) immediately, and the process can later be resumed.",
    "146": "SIGTSTP: Typically sent by the terminal when the user presses Ctrl+Z, this signal suspends a process, allowing it to be resumed later (usually with the SIGCONT signal).",
    "147": "SIGCONT: This signal is used to resume a process that has been stopped by SIGSTOP or SIGTSTP. It tells the process to continue its execution.",
    "148": "SIGCHLD: Sent to a parent process when one of its child processes terminates or stops, SIGCHLD allows the parent to perform necessary cleanup operations, such as reaping zombie processes.",
    "149": "Occurs when a background process attempts to read from the terminal. Since background processes aren\u2019t allowed to read terminal input, the operating system sends this signal to suspend the process.",
    "150": "SIGTTOU: Similar to SIGTTIN, this signal is sent when a background process attempts to write to the terminal. It prevents background processes from interfering with terminal output.",
    "151": "SIGIO: Indicates that I/O is available on a file descriptor. This signal is used for asynchronous I/O, letting the process know when it can perform read or write operations.",
    "152": "SIGXCPU: Generated when a process exceeds its CPU time limit, this signal is a mechanism to prevent runaway processes from consuming too much processor time.",
    "153": "SIGXFSZ: Triggered when a process attempts to extend a file beyond the maximum allowed size. This signal enforces file size limits set by the operating system.",
    "154": "SIGVTALRM: This signal is sent when a virtual timer (measuring the process\u2019s CPU time) expires. It is useful for monitoring the amount of CPU time consumed by a process.",
    "155": "SIGPROF: Similar to SIGVTALRM, SIGPROF is used for profiling. It measures the total elapsed time (including both user and system time) and is often used in performance analysis.",
    "156": "SIGWINCH: Sent when the size of the terminal window changes, this signal lets applications adjust their output formatting or graphical interfaces to the new window dimensions.",
    "157": "SIGINFO: Available on some systems, this signal is used to request status information from a process. It is less commonly used and may not be supported everywhere.",
    "158": "SIGUSR1: A user-defined signal that applications can employ for any purpose. Its behavior is determined by the application\u2019s design, making it a flexible tool for custom signaling.",
    "159": "SIGUSR2: Another user-defined signal available for custom use. Like SIGUSR1, its meaning is determined by the application\u2019s implementation.",
    "250": "The TRF_UNEXPECTED_TRF_EXCEPTION error that indicates that the transform encountered an exception that it did not handle. This means that an unexpected error occurred during the execution of the transform, and the transform did not have a specific way to manage or recover from this error.",
    "251": "The TRF_EXTERNAL error is an exit code used to indicate that a transform error occurred in an external call. This means that while the transform was running, it called an external program or service, and that call failed, causing the transform to exit with this specific error code.",
    "252": "The TRF_INTERNAL error is an exit code used to indicate an internal error within the transform process. This type of error typically signifies that something went wrong inside the transform's own code or logic, rather than an external issue or user error.",
    "253": "The TRF_UNKNOWN error code is used to represent an unknown error in the transformation process. This erroris a catch-all error code for situations where the specific cause of the error is not identified or does not match any of the predefined error codes."
}